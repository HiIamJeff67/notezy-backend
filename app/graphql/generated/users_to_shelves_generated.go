// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	gqlmodels "notezy-backend/app/graphql/models"
	"notezy-backend/app/models/schemas/enums"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _PrivateUsersToShelves_userId(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PrivateUsersToShelves) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PrivateUsersToShelves_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PrivateUsersToShelves_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PrivateUsersToShelves",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PrivateUsersToShelves_shelfId(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PrivateUsersToShelves) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PrivateUsersToShelves_shelfId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShelfID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PrivateUsersToShelves_shelfId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PrivateUsersToShelves",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PrivateUsersToShelves_permission(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PrivateUsersToShelves) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PrivateUsersToShelves_permission(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.AccessControlPermission)
	fc.Result = res
	return ec.marshalNAccessControlPermission2notezyᚑbackendᚋappᚋmodelsᚋschemasᚋenumsᚐAccessControlPermission(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PrivateUsersToShelves_permission(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PrivateUsersToShelves",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccessControlPermission does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PrivateUsersToShelves_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PrivateUsersToShelves) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PrivateUsersToShelves_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PrivateUsersToShelves_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PrivateUsersToShelves",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PrivateUsersToShelves_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PrivateUsersToShelves) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PrivateUsersToShelves_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PrivateUsersToShelves_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PrivateUsersToShelves",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PrivateUsersToShelves_user(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PrivateUsersToShelves) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PrivateUsersToShelves_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.PublicUser)
	fc.Result = res
	return ec.marshalNPublicUser2ᚖnotezyᚑbackendᚋappᚋgraphqlᚋmodelsᚐPublicUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PrivateUsersToShelves_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PrivateUsersToShelves",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "publicId":
				return ec.fieldContext_PublicUser_publicId(ctx, field)
			case "name":
				return ec.fieldContext_PublicUser_name(ctx, field)
			case "displayName":
				return ec.fieldContext_PublicUser_displayName(ctx, field)
			case "role":
				return ec.fieldContext_PublicUser_role(ctx, field)
			case "plan":
				return ec.fieldContext_PublicUser_plan(ctx, field)
			case "status":
				return ec.fieldContext_PublicUser_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_PublicUser_createdAt(ctx, field)
			case "userInfo":
				return ec.fieldContext_PublicUser_userInfo(ctx, field)
			case "badges":
				return ec.fieldContext_PublicUser_badges(ctx, field)
			case "themes":
				return ec.fieldContext_PublicUser_themes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PublicUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PrivateUsersToShelves_shelf(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PrivateUsersToShelves) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PrivateUsersToShelves_shelf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shelf, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.PrivateShelf)
	fc.Result = res
	return ec.marshalNPrivateShelf2ᚖnotezyᚑbackendᚋappᚋgraphqlᚋmodelsᚐPrivateShelf(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PrivateUsersToShelves_shelf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PrivateUsersToShelves",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PrivateShelf_id(ctx, field)
			case "name":
				return ec.fieldContext_PrivateShelf_name(ctx, field)
			case "encodedStructure":
				return ec.fieldContext_PrivateShelf_encodedStructure(ctx, field)
			case "encodedStructureByteSize":
				return ec.fieldContext_PrivateShelf_encodedStructureByteSize(ctx, field)
			case "totalShelfNodes":
				return ec.fieldContext_PrivateShelf_totalShelfNodes(ctx, field)
			case "totalMaterials":
				return ec.fieldContext_PrivateShelf_totalMaterials(ctx, field)
			case "maxWidth":
				return ec.fieldContext_PrivateShelf_maxWidth(ctx, field)
			case "maxDepth":
				return ec.fieldContext_PrivateShelf_maxDepth(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PrivateShelf_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_PrivateShelf_createdAt(ctx, field)
			case "usersToShelves":
				return ec.fieldContext_PrivateShelf_usersToShelves(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PrivateShelf", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var privateUsersToShelvesImplementors = []string{"PrivateUsersToShelves"}

func (ec *executionContext) _PrivateUsersToShelves(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.PrivateUsersToShelves) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, privateUsersToShelvesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrivateUsersToShelves")
		case "userId":
			out.Values[i] = ec._PrivateUsersToShelves_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shelfId":
			out.Values[i] = ec._PrivateUsersToShelves_shelfId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "permission":
			out.Values[i] = ec._PrivateUsersToShelves_permission(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._PrivateUsersToShelves_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._PrivateUsersToShelves_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._PrivateUsersToShelves_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shelf":
			out.Values[i] = ec._PrivateUsersToShelves_shelf(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNPrivateUsersToShelves2ᚕᚖnotezyᚑbackendᚋappᚋgraphqlᚋmodelsᚐPrivateUsersToShelvesᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.PrivateUsersToShelves) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrivateUsersToShelves2ᚖnotezyᚑbackendᚋappᚋgraphqlᚋmodelsᚐPrivateUsersToShelves(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPrivateUsersToShelves2ᚖnotezyᚑbackendᚋappᚋgraphqlᚋmodelsᚐPrivateUsersToShelves(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.PrivateUsersToShelves) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PrivateUsersToShelves(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
