# the complete user structure: app/models/schemas/user_schema.go
# this schema file is only use for go graphql to improve better user experience

type PublicUser {
  # id: UUID!
  # searchCursorId: String! # the encoded of this field is the identifier of the PublicUser
  name: String!
  displayName: String!
  email: String!
  # password: String!
  # refreshToken: String!
  # loginCount: Int
  # blockLoginUtil: Time!
  # userAgent: String!
  role: UserRole!
  plan: UserPlan!
  # prevStatus: UserStatus!
  status: UserStatus!
  createdAt: Time!
  updatedAt: Time!

  # relations
  # userInfo: PublicUserInfo!
  # badges: [PublicBadge!]!
  # themes: [PublicTheme!]!
}

# =============== Search Filters & SortBy & Input =============== #

input SearchUserFilters {
  role: UserRole
  plan: UserPlan
  status: UserStatus
  hasAvatar: Boolean
  country: Country
  isOnline: Boolean
}

enum SearchUserSortBy {
  RELEVANCE
  NAME # using this to check both the name and display name fields
  LAST_ACTIVE
  CREATED_AT
}

input SearchUserInput {
  query: String! # the input from the frontend
  after: String # base64 encoded cursor
  first: Int = 10 # the number of data we want to extract
  filters: SearchUserFilters
  sortBy: SearchUserSortBy = RELEVANCE
  sortOrder: SearchSortOrder = DESC
}

# =============== Search Cursor Fields =============== #

# type SearchUserEnvironmentAttributes {}

input SearchUserCursorFields {
  searchCursorId: String!
  # environmentAttributes: SearchUserEnvironmentAttributes
}

# =============== Search Edge & Connection =============== #

type SearchUserEdge implements SearchEdge {
  encodedSearchCursor: String! # the encoded search identifier
  node: PublicUser! # the search result
  # relations
  userInfo: PublicUserInfo! # extension leaving for searching public user info in the future
  badges: [PublicBadge!]! # extension leaving for searching public badge in the future
  themes: [PublicTheme!]! # extension leaving for searching public theme in the future
}

type SearchUserConnection implements SearchConnection {
  searchEdges: [SearchUserEdge!]!
  searchPageInfo: SearchPageInfo!
  totalCount: Int!
  searchTime: Float!
}
