# the complete user structure: app/models/schemas/user_schema.go
# this schema file is only use for go graphql to improve better user experience

type PublicUser {
  # id: UUID!
  encodedSearchCursor: String! # the identifier of the PublicUser
  name: String!
  displayName: String!
  email: String!
  # password: String!
  # refreshToken: String!
  # loginCount: Int
  # blockLoginUtil: Time!
  # userAgent: String!
  role: UserRole!
  plan: UserPlan!
  # prevStatus: UserStatus!
  status: UserStatus!
  createdAt: Time!
  updatedAt: Time!

  # relations
  userInfo: PublicUserInfo!
  badges: [PublicBadge!]!
  themes: [PublicTheme!]!
}

# =============== Searchable Filters & SortBy & Input =============== #

input SearchableUserFilters {
  role: UserRole
  plan: UserPlan
  status: UserStatus
  hasAvatar: Boolean
  country: Country
  isOnline: Boolean
}

enum SearchableUserSortBy {
  RELEVANCE
  NAME # using this to check both the name and display name fields
  LAST_ACTIVE
  CREATED_AT
}

input SearchableUserInput {
  query: String! # the input from the frontend
  after: String # base64 encoded cursor
  first: Int = 10 # the number of data we want to extract
  filters: SearchableUserFilters
  sortBy: SearchableUserSortBy = RELEVANCE
  sortOrder: SearchableSortOrder = DESC
}

# =============== Searchable Cursor Fields =============== #

# type SearchableUserEnvironmentAttributes {}

input SearchableUserCursorFields {
  encodedSearchCursor: String!
  # environmentAttributes: SearchableUserEnvironmentAttributes
}

# =============== Searchable Edge & Connection =============== #

type SearchableUserEdge implements SearchEdge {
  node: PublicUser!
  encodedSearchCursor: String!
}

type SearchableUserConnection implements SearchConnection {
  searchEdges: [SearchableUserEdge!]!
  searchPageInfo: SearchPageInfo!
  totalCount: Int!
  searchTime: Float!
}
