package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	contexts "notezy-backend/app/contexts"
	exceptions "notezy-backend/app/exceptions"
	generated "notezy-backend/app/graphql/generated"
	gqlmodels "notezy-backend/app/graphql/models"
	constants "notezy-backend/shared/constants"
)

// SearchUsers is the resolver for the searchUsers field.
func (r *queryResolver) SearchUsers(ctx context.Context, input gqlmodels.SearchUserInput) (*gqlmodels.SearchUserConnection, error) {
	result, exception := r.userService.SearchPublicUsers(ctx, input)
	if exception != nil {
		return nil, exception.ToGraphQLError(ctx)
	}

	return result, nil
}

// SearchThemes is the resolver for the searchThemes field.
func (r *queryResolver) SearchThemes(ctx context.Context, input gqlmodels.SearchThemeInput) (*gqlmodels.SearchThemeConnection, error) {
	result, exception := r.themeService.SearchPublicThemes(ctx, input)
	if exception != nil {
		return nil, exception.ToGraphQLError(ctx)
	}

	return result, nil
}

// SearchShelves is the resolver for the searchShelves field.
func (r *queryResolver) SearchShelves(ctx context.Context, input gqlmodels.SearchShelfInput) (*gqlmodels.SearchShelfConnection, error) {
	ginCtx, exception := contexts.GetAndConvertContextToGinContext(ctx)
	if exception != nil {
		return nil, exception.ToGraphQLError(ctx)
	}
	userId, exception := contexts.GetAndConvertContextFieldToUUID(ginCtx, constants.ContextFieldName_User_Id)
	if exception != nil {
		return nil, exception.ToGraphQLError(ctx)
	}
	if userId == nil {
		return nil, exceptions.Context.FailedToGetCorrectContextValue(userId).ToGraphQLError(ctx)
	}

	result, exception := r.shelfService.SearchPrivateShelves(ctx, *userId, input)
	if exception != nil {
		return nil, exception.ToGraphQLError(ctx)
	}

	return result, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
