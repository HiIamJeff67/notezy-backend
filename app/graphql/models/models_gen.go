// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodels

import (
	"bytes"
	"fmt"
	"io"
	"notezy-backend/app/models/schemas/enums"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type SearchConnection interface {
	IsSearchConnection()
	GetSearchPageInfo() *SearchPageInfo
	GetTotalCount() int32
	GetSearchTime() float64
}

type SearchEdge interface {
	IsSearchEdge()
	GetEncodedSearchCursor() string
}

type PrivateShelf struct {
	ID                       uuid.UUID     `json:"id"`
	Name                     string        `json:"name"`
	EncodedStructure         []byte        `json:"encodedStructure"`
	EncodedStructureByteSize int64         `json:"encodedStructureByteSize"`
	TotalShelfNodes          int32         `json:"totalShelfNodes"`
	TotalMaterials           int32         `json:"totalMaterials"`
	MaxWidth                 int32         `json:"maxWidth"`
	MaxDepth                 int32         `json:"maxDepth"`
	UpdatedAt                time.Time     `json:"updatedAt"`
	CreatedAt                time.Time     `json:"createdAt"`
	Owner                    []*PublicUser `json:"owner"`
}

type PublicBadge struct {
	PublicID    string          `json:"publicId"`
	Title       string          `json:"title"`
	Description string          `json:"description"`
	Type        enums.BadgeType `json:"type"`
	ImageURL    *string         `json:"imageURL,omitempty"`
	CreatedAt   time.Time       `json:"createdAt"`
	Users       []*PublicUser   `json:"users"`
}

type PublicTheme struct {
	PublicID      string      `json:"publicId"`
	Name          string      `json:"name"`
	IsDark        bool        `json:"isDark"`
	Version       string      `json:"version"`
	IsDefault     bool        `json:"isDefault"`
	DownloadURL   *string     `json:"downloadURL,omitempty"`
	DownloadCount int64       `json:"downloadCount"`
	CreatedAt     time.Time   `json:"createdAt"`
	UpdatedAt     time.Time   `json:"updatedAt"`
	Author        *PublicUser `json:"author"`
}

type PublicUser struct {
	PublicID    string           `json:"publicId"`
	Name        string           `json:"name"`
	DisplayName string           `json:"displayName"`
	Role        enums.UserRole   `json:"role"`
	Plan        enums.UserPlan   `json:"plan"`
	Status      enums.UserStatus `json:"status"`
	CreatedAt   time.Time        `json:"createdAt"`
	UserInfo    *PublicUserInfo  `json:"userInfo"`
	Badges      []*PublicBadge   `json:"badges"`
	Themes      []*PublicTheme   `json:"themes"`
}

type PublicUserInfo struct {
	AvatarURL          *string          `json:"avatarURL,omitempty"`
	CoverBackgroundURL *string          `json:"coverBackgroundURL,omitempty"`
	Header             *string          `json:"header,omitempty"`
	Introduction       *string          `json:"introduction,omitempty"`
	Gender             enums.UserGender `json:"gender"`
	Country            *enums.Country   `json:"country,omitempty"`
	BirthDate          time.Time        `json:"birthDate"`
}

type Query struct {
}

type SearchBadgeConnection struct {
	SearchEdges    []*SearchBadgeEdge `json:"searchEdges"`
	SearchPageInfo *SearchPageInfo    `json:"searchPageInfo"`
	TotalCount     int32              `json:"totalCount"`
	SearchTime     float64            `json:"searchTime"`
}

func (SearchBadgeConnection) IsSearchConnection()                     {}
func (this SearchBadgeConnection) GetSearchPageInfo() *SearchPageInfo { return this.SearchPageInfo }
func (this SearchBadgeConnection) GetTotalCount() int32               { return this.TotalCount }
func (this SearchBadgeConnection) GetSearchTime() float64             { return this.SearchTime }

type SearchBadgeCursorFields struct {
	PublicID string `json:"publicId"`
}

type SearchBadgeEdge struct {
	EncodedSearchCursor string       `json:"encodedSearchCursor"`
	Node                *PublicBadge `json:"node"`
}

func (SearchBadgeEdge) IsSearchEdge()                       {}
func (this SearchBadgeEdge) GetEncodedSearchCursor() string { return this.EncodedSearchCursor }

type SearchBadgeFilters struct {
	Type *enums.BadgeType `json:"type,omitempty"`
}

type SearchBadgeInput struct {
	Query      string              `json:"query"`
	After      *string             `json:"after,omitempty"`
	First      *int32              `json:"first,omitempty"`
	Filters    *SearchBadgeFilters `json:"filters,omitempty"`
	SortBy     *SearchBadgeSortBy  `json:"sortBy,omitempty"`
	SortOrderr *SearchSortOrder    `json:"sortOrderr,omitempty"`
}

type SearchPageInfo struct {
	HasNextPage              bool    `json:"hasNextPage"`
	HasPreviousPage          bool    `json:"hasPreviousPage"`
	StartEncodedSearchCursor *string `json:"startEncodedSearchCursor,omitempty"`
	EndEncodedSearchCursor   *string `json:"endEncodedSearchCursor,omitempty"`
}

type SearchShelfConnection struct {
	SearchEdges    []*SearchShelfEdge `json:"searchEdges"`
	SearchPageInfo *SearchPageInfo    `json:"searchPageInfo"`
	TotalCount     int32              `json:"totalCount"`
	SearchTime     float64            `json:"searchTime"`
}

func (SearchShelfConnection) IsSearchConnection()                     {}
func (this SearchShelfConnection) GetSearchPageInfo() *SearchPageInfo { return this.SearchPageInfo }
func (this SearchShelfConnection) GetTotalCount() int32               { return this.TotalCount }
func (this SearchShelfConnection) GetSearchTime() float64             { return this.SearchTime }

type SearchShelfCursorFields struct {
	ID uuid.UUID `json:"id"`
}

type SearchShelfEdge struct {
	EncodedSearchCursor string        `json:"encodedSearchCursor"`
	Node                *PrivateShelf `json:"node"`
}

func (SearchShelfEdge) IsSearchEdge()                       {}
func (this SearchShelfEdge) GetEncodedSearchCursor() string { return this.EncodedSearchCursor }

type SearchShelfInput struct {
	Query     string             `json:"query"`
	After     *string            `json:"after,omitempty"`
	First     *int32             `json:"first,omitempty"`
	SortBy    *SearchShelfSortBy `json:"sortBy,omitempty"`
	SortOrder *SearchSortOrder   `json:"sortOrder,omitempty"`
}

type SearchThemeConnection struct {
	SearchEdges    []*SearchThemeEdge `json:"searchEdges"`
	SearchPageInfo *SearchPageInfo    `json:"searchPageInfo"`
	TotalCount     int32              `json:"totalCount"`
	SearchTime     float64            `json:"searchTime"`
}

func (SearchThemeConnection) IsSearchConnection()                     {}
func (this SearchThemeConnection) GetSearchPageInfo() *SearchPageInfo { return this.SearchPageInfo }
func (this SearchThemeConnection) GetTotalCount() int32               { return this.TotalCount }
func (this SearchThemeConnection) GetSearchTime() float64             { return this.SearchTime }

type SearchThemeCursorFields struct {
	PublicID string `json:"publicId"`
}

type SearchThemeEdge struct {
	EncodedSearchCursor string       `json:"encodedSearchCursor"`
	Node                *PublicTheme `json:"node"`
}

func (SearchThemeEdge) IsSearchEdge()                       {}
func (this SearchThemeEdge) GetEncodedSearchCursor() string { return this.EncodedSearchCursor }

type SearchThemeFilters struct {
	IsDefault                *bool  `json:"isDefault,omitempty"`
	DownloadCountGreaterThan *int32 `json:"downloadCountGreaterThan,omitempty"`
}

type SearchThemeInput struct {
	Query     string              `json:"query"`
	After     *string             `json:"after,omitempty"`
	First     *int32              `json:"first,omitempty"`
	Filters   *SearchThemeFilters `json:"filters,omitempty"`
	SortBy    *SearchThemeSortBy  `json:"sortBy,omitempty"`
	SortOrder *SearchSortOrder    `json:"sortOrder,omitempty"`
}

type SearchUserConnection struct {
	SearchEdges    []*SearchUserEdge `json:"searchEdges"`
	SearchPageInfo *SearchPageInfo   `json:"searchPageInfo"`
	TotalCount     int32             `json:"totalCount"`
	SearchTime     float64           `json:"searchTime"`
}

func (SearchUserConnection) IsSearchConnection()                     {}
func (this SearchUserConnection) GetSearchPageInfo() *SearchPageInfo { return this.SearchPageInfo }
func (this SearchUserConnection) GetTotalCount() int32               { return this.TotalCount }
func (this SearchUserConnection) GetSearchTime() float64             { return this.SearchTime }

type SearchUserCursorFields struct {
	PublicID string `json:"publicId"`
}

type SearchUserEdge struct {
	EncodedSearchCursor string      `json:"encodedSearchCursor"`
	Node                *PublicUser `json:"node"`
}

func (SearchUserEdge) IsSearchEdge()                       {}
func (this SearchUserEdge) GetEncodedSearchCursor() string { return this.EncodedSearchCursor }

type SearchUserFilters struct {
	Role      *enums.UserRole   `json:"role,omitempty"`
	Plan      *enums.UserPlan   `json:"plan,omitempty"`
	Status    *enums.UserStatus `json:"status,omitempty"`
	HasAvatar *bool             `json:"hasAvatar,omitempty"`
	Country   *enums.Country    `json:"country,omitempty"`
	IsOnline  *bool             `json:"isOnline,omitempty"`
}

type SearchUserInput struct {
	Query     string             `json:"query"`
	After     *string            `json:"after,omitempty"`
	First     *int32             `json:"first,omitempty"`
	Filters   *SearchUserFilters `json:"filters,omitempty"`
	SortBy    *SearchUserSortBy  `json:"sortBy,omitempty"`
	SortOrder *SearchSortOrder   `json:"sortOrder,omitempty"`
}

type CountryCode string

const (
	CountryCodeCountryCode886 CountryCode = "COUNTRY_CODE_886"
	CountryCodeCountryCode81  CountryCode = "COUNTRY_CODE_81"
	CountryCodeCountryCode60  CountryCode = "COUNTRY_CODE_60"
	CountryCodeCountryCode65  CountryCode = "COUNTRY_CODE_65"
	CountryCodeCountryCode86  CountryCode = "COUNTRY_CODE_86"
	CountryCodeCountryCode1   CountryCode = "COUNTRY_CODE_1"
	CountryCodeCountryCode44  CountryCode = "COUNTRY_CODE_44"
	CountryCodeCountryCode61  CountryCode = "COUNTRY_CODE_61"
)

var AllCountryCode = []CountryCode{
	CountryCodeCountryCode886,
	CountryCodeCountryCode81,
	CountryCodeCountryCode60,
	CountryCodeCountryCode65,
	CountryCodeCountryCode86,
	CountryCodeCountryCode1,
	CountryCodeCountryCode44,
	CountryCodeCountryCode61,
}

func (e CountryCode) IsValid() bool {
	switch e {
	case CountryCodeCountryCode886, CountryCodeCountryCode81, CountryCodeCountryCode60, CountryCodeCountryCode65, CountryCodeCountryCode86, CountryCodeCountryCode1, CountryCodeCountryCode44, CountryCodeCountryCode61:
		return true
	}
	return false
}

func (e CountryCode) String() string {
	return string(e)
}

func (e *CountryCode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CountryCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CountryCode", str)
	}
	return nil
}

func (e CountryCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CountryCode) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CountryCode) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SearchBadgeSortBy string

const (
	SearchBadgeSortByRelevance SearchBadgeSortBy = "RELEVANCE"
	SearchBadgeSortByTitle     SearchBadgeSortBy = "TITLE"
	SearchBadgeSortByCreatedAt SearchBadgeSortBy = "CREATED_AT"
)

var AllSearchBadgeSortBy = []SearchBadgeSortBy{
	SearchBadgeSortByRelevance,
	SearchBadgeSortByTitle,
	SearchBadgeSortByCreatedAt,
}

func (e SearchBadgeSortBy) IsValid() bool {
	switch e {
	case SearchBadgeSortByRelevance, SearchBadgeSortByTitle, SearchBadgeSortByCreatedAt:
		return true
	}
	return false
}

func (e SearchBadgeSortBy) String() string {
	return string(e)
}

func (e *SearchBadgeSortBy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchBadgeSortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchBadgeSortBy", str)
	}
	return nil
}

func (e SearchBadgeSortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SearchBadgeSortBy) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SearchBadgeSortBy) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SearchShelfSortBy string

const (
	SearchShelfSortByRelevance  SearchShelfSortBy = "RELEVANCE"
	SearchShelfSortByName       SearchShelfSortBy = "NAME"
	SearchShelfSortByLastUpdate SearchShelfSortBy = "LAST_UPDATE"
	SearchShelfSortByCreatedAt  SearchShelfSortBy = "CREATED_AT"
)

var AllSearchShelfSortBy = []SearchShelfSortBy{
	SearchShelfSortByRelevance,
	SearchShelfSortByName,
	SearchShelfSortByLastUpdate,
	SearchShelfSortByCreatedAt,
}

func (e SearchShelfSortBy) IsValid() bool {
	switch e {
	case SearchShelfSortByRelevance, SearchShelfSortByName, SearchShelfSortByLastUpdate, SearchShelfSortByCreatedAt:
		return true
	}
	return false
}

func (e SearchShelfSortBy) String() string {
	return string(e)
}

func (e *SearchShelfSortBy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchShelfSortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchShelfSortBy", str)
	}
	return nil
}

func (e SearchShelfSortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SearchShelfSortBy) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SearchShelfSortBy) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SearchSortOrder string

const (
	SearchSortOrderAsc  SearchSortOrder = "ASC"
	SearchSortOrderDesc SearchSortOrder = "DESC"
)

var AllSearchSortOrder = []SearchSortOrder{
	SearchSortOrderAsc,
	SearchSortOrderDesc,
}

func (e SearchSortOrder) IsValid() bool {
	switch e {
	case SearchSortOrderAsc, SearchSortOrderDesc:
		return true
	}
	return false
}

func (e SearchSortOrder) String() string {
	return string(e)
}

func (e *SearchSortOrder) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchSortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchSortOrder", str)
	}
	return nil
}

func (e SearchSortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SearchSortOrder) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SearchSortOrder) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SearchThemeSortBy string

const (
	SearchThemeSortByRelevance  SearchThemeSortBy = "RELEVANCE"
	SearchThemeSortByName       SearchThemeSortBy = "NAME"
	SearchThemeSortByLastUpdate SearchThemeSortBy = "LAST_UPDATE"
	SearchThemeSortByCreatedAt  SearchThemeSortBy = "CREATED_AT"
)

var AllSearchThemeSortBy = []SearchThemeSortBy{
	SearchThemeSortByRelevance,
	SearchThemeSortByName,
	SearchThemeSortByLastUpdate,
	SearchThemeSortByCreatedAt,
}

func (e SearchThemeSortBy) IsValid() bool {
	switch e {
	case SearchThemeSortByRelevance, SearchThemeSortByName, SearchThemeSortByLastUpdate, SearchThemeSortByCreatedAt:
		return true
	}
	return false
}

func (e SearchThemeSortBy) String() string {
	return string(e)
}

func (e *SearchThemeSortBy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchThemeSortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchThemeSortBy", str)
	}
	return nil
}

func (e SearchThemeSortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SearchThemeSortBy) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SearchThemeSortBy) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SearchUserSortBy string

const (
	SearchUserSortByRelevance  SearchUserSortBy = "RELEVANCE"
	SearchUserSortByName       SearchUserSortBy = "NAME"
	SearchUserSortByLastActive SearchUserSortBy = "LAST_ACTIVE"
	SearchUserSortByCreatedAt  SearchUserSortBy = "CREATED_AT"
)

var AllSearchUserSortBy = []SearchUserSortBy{
	SearchUserSortByRelevance,
	SearchUserSortByName,
	SearchUserSortByLastActive,
	SearchUserSortByCreatedAt,
}

func (e SearchUserSortBy) IsValid() bool {
	switch e {
	case SearchUserSortByRelevance, SearchUserSortByName, SearchUserSortByLastActive, SearchUserSortByCreatedAt:
		return true
	}
	return false
}

func (e SearchUserSortBy) String() string {
	return string(e)
}

func (e *SearchUserSortBy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchUserSortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchUserSortBy", str)
	}
	return nil
}

func (e SearchUserSortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SearchUserSortBy) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SearchUserSortBy) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
